/**********************
 *    @eohalPacer
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports)
    : typeof define === 'function' && define.amd ? define(['exports'], factory)
      : (factory((global.eohalPacer = global.eohalPacer || {})))
}(this, function (exports) {
  'use strict'

  // md: # eon-eohal-pacer
  // md: **create new items at init, on auto or upon event**
  // md:
  // md: ### functions
  // md:
  // md: * ##### _geojsor
  // md: usage: `_geojsor(@ani, @prob`
  // md: ani.pacer.initN
  // md: ani.pacer.eventN
  // md: ani.pacer.autoN
  // md: ani.pacer.autoP
  // md: ani.pacer.outtimed
  // md: ani.pacer.maxN
  // md: ani.pacer.geospan
  // md: ani.pacer.geoaad: {0,1} if 1, pace items are added to pacer (eg. LineString trace)
  // md: ani.pacer.geotype: {LineString}
  // md: ani.pacer.geobase: {geo, ere, pro}
  // md:
  // md: ### methods
  // md:
  // md: * ##### gramm
  // md: `@a.p.pacer.initSitus`  : situs for init items
  // md: `@a.p.pacer.autoSitus`  : situs for auto items, calls `m.stace.getLocus(this.stace, ani)`
  // md: usage: `eoload.pacer.autoSitus(anigram)`
  // md: autositus in zindex: `function(a) {return muonStace.getLocus(this.stace, ani) }` gets `ani.p.pacer.stance`
  // md: auto time is `a.p.eotim.unitPassed - a.p.pacer.eoouted`
  // md: `@a.p.pacer.eventSitus` : situs for event items
  // md: `count` new items to pacer from init, auto and event
  // md:
  // md: `@a.p.pacer.fidder`  : new item `fid` identifier
  // md: `@a.p.pacer.geojsor(@anigram, @counter)` : gets new item
  // md:
  // md: ## license
  // md: MIT

  async function eohalPacer (__mapper = {}) {
    let [
      ctlRayder,
      ctlWen,
      ctlVersor,
      eohalTornasol,
      muonEoric,
      muonGeom,
      muonStace,
      muonProps,
      muonProfier,
      muonProj3ct,
      muonGeoj,
    ] = await Promise.all([
      __mapper('xs').c('rayder'),
      __mapper('xs').c('wen'),
      __mapper('xs').c('versor'),
      __mapper('xs').e('tornasol'),
      __mapper('xs').m('eoric'),
      __mapper('xs').m('geom'),
      __mapper('xs').m('stace'),
      __mapper('xs').m('props'),
      __mapper('xs').m('profier'),
      __mapper('xs').m('proj3ct'),
      __mapper('xs').m('geoj'),
    ])

    let muonStore = __mapper('muonStore')
    let renderSvg = __mapper('renderSvg')

    // ............................. pacer
    function eohale (anitem) {
      let newItems = []

      let eohal = anitem.eohal,
        eoload = anitem.eoload,
        eoric = anitem.eoric,
        eotim = anitem.eotim

      let pacer = eoload.pacer || {}, // pacer
        mousesignal = pacer.mousesignal || 0, // mousesignal
        geospan = pacer.geospan || 0, // geospan between paceitems
        geoaad = pacer.geoaad || 0, // geoaad paceitem to previous anitem
        geosort = pacer.geosort || 'anigram', // paceitem sort
        geoType = pacer.geotype || 'LineString', //
        base = pacer.geobase || 'eoform' //

      let uidAnima = muonEoric.getuid(eoric)
      let uidAnigram = muonEoric.getuid(eoric)
      let uidParent = anitem.eoric.parentuid

      let ricPreitem = anitem.eoric
      let uidPreitem = muonEoric.getuid(ricPreitem)

      let animas = muonStore.animas()
      let anigrams = muonStore.anigrams()

      // anima.avatar(pacer)
      // anima(pacer)
      // pacer generates animas (geosort:animas) or anigrams (geosort:anigram)

      // the anigram is the trace anigram

      let anigram = anitem

      // the parent anima

      let parentAnima = uidParent ? muonStore.findAnimaFromUid(uidParent) : null

      let preAnima = uidPreitem ? muonStore.findAnimaFromUid(uidPreitem) : null

      // md: the anima is the pacer anitem uid

      let anima = muonStore.findAnimaFromUid(uidAnima)

      // md: h.pacer may be anima or avatar
      // md: if e(anima):pacer, pacerAnima is anima
      // md: if e(anima.avatar):pacer, pacerAnima is parentAnima

      let pacerAnima
      if (anima !== undefined) {
        pacerAnima = anima // pacer is anima
      } else {
        pacerAnima = parentAnima // pacer in avatar
      }

      // md: anima has pacer in eoload or in avatar
      console.assert(pacerAnima !== undefined)

      // md: count: key:items pairs to be generated by pacer
      let count = {}

      // md: if mouse grabbed, enable event count, pacer.eventN

      let grabbed = ctlRayder.grabbed()
      if (grabbed !== false) { //
        count.event = Math.floor(pacer.eventN) // if in state or was event
        count.grabbed = grabbed
      }

      // md: pacer init (pacer.initN) if anima is not yet eoinited

      if (pacerAnima.eoinited === undefined || pacerAnima.eoinited[uidAnima] === undefined) {
        count.init = Math.floor(pacer.initN) // count INIT
      } else {
        if (1 && 1) console.log('e.pacer eoinited', pacerAnima.eoric.uid, pacerAnima.eoinited)
      }

      // cycletime since last eoouted item, relevant if auto

      let cycletime = eotim.unitPassed - (pacer.eoouted || 0)

      // if the cycletime is longer than auto pace
      //  and unitPassed is beyong autoT ...

      if (cycletime >= pacer.autoP &&
            eotim.unitPassed > (pacer.autoT || 0)
      ) {
        count.auto = Math.floor(pacer.autoN) // count AUTO

        // md: pacerUid is the pacer anima uid

        let pacerUid = pacerAnima.eoric.uid

        // md: if pacer is avatar, each is inited.
        // md: eoinited is set per pacer

        pacerAnima.eoinited = (pacerAnima.eoinited === undefined)
          ? {[pacerUid]: eotim.unitPassed}
          : Object.assign(pacerAnima.eoinited, {[pacerUid]: eotim.unitPassed})

        // md: set pacer.eoouted: item was eoouted at eotim.unitPassed time
        // md: if in auto mode, pace on each cycle
        // md: save anitem to preserve eoinited and eoouted

        pacerAnima.eoouted = (pacerAnima.eoouted === undefined)
          ? {[pacerUid]: eotim.unitPassed}
          : Object.assign(pacerAnima.eoouted, {[pacerUid]: eotim.unitPassed})

        let animas = Array.of(pacerAnima)

        // md: save anima .......... to persist eoinited and eoouted

        // muonStore.apply({type: 'UPDANIMA', caller: 'h.pacer', animas: animas})
      }

      // md: eocount: eg: {init:4, auto:1, event:3}
      // md: eocount.init runs once
      // md: eocount.auto runs on each cycle
      // md: eocount.event runs on mouse event

      if (Object.keys(count).length > 0) { // on pace count, eg {init: 6, auto: 1}
        for (let counter = 0; counter < Object.keys(count).length; counter++) {
          // key is the sort of count { init, auto, event }

          let key = Object.keys(count)[counter]

          // qitems is the number of items to be paced
          // generate qitems items of type key, eg. 6 (at init, on auto, when event)

          let qitems = count[key]

          // count, key, qitems, kq

          for (let i = 0; i < qitems; i++) {
            let props = {
              count: count,
              key: key,
              counter: i,
            }

            let newItem
            if (anitem.eoload.pacer.geosort === 'anima') {
              newItem = muonProps.clone(pacerAnima) // anima
            } else {
              newItem = muonProps.clone(anigram) // anigram
            }

            // md: remove eoload from newItem

            delete newItem.eoload

            // NOT pacer.AAD if not pacer.add, pacer generates anitems
            // eofold is Feature

            // md: an anima with pacer eohal gets the newItem fulfilled with
            // md: the calls in the pacer
            // md: properties in the anima match with functors in the pacer

            let ownProps = Object.getOwnPropertyNames(pacer)
            for (let prop of ownProps) {
              if (newItem[prop] !== undefined) {
                let newpropval = muonProps.v(pacer[prop], anitem, props)
                newItem[prop] = newpropval
              }
            }

            // md: anima is stored

            let eohal = __mapper(__mapper('xs').ceonize(newItem.eohal, 'eohal'))
            if (geosort === 'anima') {
              // md: eohal.ween
              let newItemsInCount = eohal.ween(newItem)

              newItemsInCount = muonProps.a(newItemsInCount)
              newItems = [...newItems, ...newItemsInCount] // add items
              muonStore.apply({type: 'UPDANIMA', caller: 'h.pacer', animas: newItems})
            } else {
              // md: eohal.gramm
              let newItemsInCount = muonProps.a(eohal.gramm(newItem))

              newItems = [...newItems, ...newItemsInCount] // add items
            }
          }
        }
      }
      return newItems
    }

    // ............................. ween
    function ween (anitem) {
      if (anitem.eoload.pacer.geosort === 'anima') {
        return eohale(anitem)
      } else {
        return Array.of(anitem)
      }
    }

    // ............................. gramm
    function gramm (anitem) {
      if (anitem.eoload.pacer.geosort === 'anima') {
        return Array.of(anitem)
      } else {
        return eohale(anitem)
      }
    }

    let eohal = {
      ween: anitem => ween(anitem),
      gramm: anitem => gramm(anitem),
    }

    // ....................... enty
    let enty = eohal

    return enty
  }

  exports.eohalPacer = eohalPacer
}))
